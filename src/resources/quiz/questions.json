[
  {
    "id": 1,
    "question": "Quelle type de données renvoie la méthode `map` du prototype des tableaux ?",
    "choices": [
      "// Un type tableau",
      "// `map` ne renvoie pas de valeur",
      "// Cela dépend de ce que l'on renvoie dans la fonction de callback"
    ]
  },
  {
    "id": 2,
    "question": "Qu'affichera ce code dans la console ?",
    "code": "console.log([['a','b'],['c'],['d','e','f']].reduce((acc, value) => [...acc, ...value], []))",
    "choices": [
      "['a', 'b', 'c', 'd', 'e', 'f']",
      "[['a','b'],['c'],['d','e','f']]",
      "[]",
      "undefined"
    ]
  },
  {
    "id": 3,
    "question": "Que désigne le concept de `early return` dans une méthode ?",
    "choices": [
      "// Le fait d'utiliser l'instruction return dans les fonctions fléchées plutôt que les autres syntaxes.",
      "// Le fait renvoyer une variable contenant les données à renvoyer plutôt que le résultat d'une expression.",
      "// Le fait de traiter en premier lieu les conditions simples conduisant à sortir de la méthode."
    ]
  },
  {
    "id": 4,
    "question": "Ce code permet-il d'injecter les valeurs 10 et 20 dans le tableau `numbers` ?",
    "code": "const numbers = [];\nconst obj = { a: 10, b: 20 };\n({ a: numbers[0], b: numbers[1] } = obj);",
    "choices": [
      "// OUI",
      "// NON",
      "// PEUT-ÊTRE"
    ]
  },
  {
    "id": 5,
    "question": "Que va afficher ce code dans la console ?",
    "code": "fetch('/api').then(\n  response => {\n    return Promise.reject('invalid call');\n  },\n  error => {\n    console.error(`Error : ${error}`);\n  }\n);",
    "choices": [
      "// Error: invalid call",
      "// Uncaught (in promise) invalid call",
      "// Rien"
    ]
  },
  {
    "id": 6,
    "question": "Quel code affichera 'Alea Jacta Est' ?",
    "code": "const value = 'alea jacta est';",
    "choices": [
      "value.replace(/ ([a-z])/g, value => value.toUpperCase())",
      "value.split(' ').map(([first, ...word]) => first.toUpperCase() + word.join()).join(' ');",
      "value.split(' ').map(word => word[0].toUpperCase() + word.slice(1)).join(' ');"
    ]
  },
  {
    "id": 7,
    "question": "Qu'affiche ce code dans la console ?",
    "code": "let result = '';\nlet i = 0;\n\ndo {\n  i = i + 1;\n  result = result + i;\n} while (i < 5);\n\nconsole.log(result);",
    "choices": [
      "12345",
      "5",
      "4"
    ]
  },
  {
    "id": 8,
    "question": "Cette condition se vérifie si...",
    "code": "if (Object.entries(obj).some(([key, value]) => key === value)) { ... }",
    "choices": [
      "// Toutes les entrées de l'objet obj comportent une clé strictement égale à la valeur.",
      "// L'objet obj contient au moins une entrée pour laquelle le nom de la clé est strictement égale à la valeur.",
      "// L'objet obj est bien un objet.",
      "// ... la condition ne se vérifiera jamais."
    ]
  },
  {
    "id": 9,
    "question": "Quelle sera la valeur de `y` après exécution du code suivant ?",
    "code": "const x = {};\nconst y = typeof x === 'object' ? { ...x, val: x.value || 'default' } : -1;",
    "choices": [
      "-1",
      "true",
      "{ val: null }",
      "{ val: 'default' }"
    ]
  },
  {
    "id": 10,
    "question": "Quelle sera la valeur de `userName` après exécution du code suivant ?",
    "code": "const { name: userName = 'unknown' } = { name: null };",
    "choices": [
      "// unknown",
      "// undefined",
      "// null"
    ]
  },
  {
    "id": 11,
    "question": "Que va afficher ce code ?",
    "code": "class Logger {\n    log(...messages) {\n        console.log(typeof messages);\n    }\n}\n\n(new Logger()).log(\"err1\", \"err2\")",
    "choices": [
      "string",
      "object",
      "array"
    ]
  },
  {
    "id": 12,
    "question": "Quel code devrait-on utiliser pour vérifier si tous les films sont des comédies ?",
    "code": "const films = apiFilms.getAll();",
    "choices": [
      "films.any(({ genre }) => genre === 'comedy')",
      "films.every(({ genre }) => genre === 'comedy')",
      "films.all(({ genre }) => genre === 'comedy')",
      "films.each(({ genre }) => genre === 'comedy')"
    ]
  },
  {
    "id": 13,
    "question": "Quelle instruction permettra d'afficher le nom du gagnant ?",
    "code": "const data = {\n  gameData: {\n    game1: {\n      players: [\n        {\n          name: 'Oliver'\n        },\n        {\n          name: 'Susan',\n          winner: true,\n        },\n        {\n          name: 'Luke',\n        },\n      ],\n    },\n  },\n};",
    "choices": [
      "const { name } = data.gameData.game1.players[1];\nconsole.log(name);",
      "const [_, { name }] = data.gameData.game1.players;\nconsole.log(name);",
      "const { players: [_, { name }] } = data.gameData.game1;\nconsole.log(name);",
      "const { game1: { players: [_, { name }] } } = data.gameData;\nconsole.log(name);",
      "const { gameData: { game1: { players: [_, { name } ] } } } = data;\nconsole.log(name);"
    ]
  },
  {
    "id": 14,
    "question": "Que va afficher ce code dans la console ?",
    "code": "\"keep clear\".startsWith(\"keep\", 1) && console.log(\"ok\");",
    "choices": [
      "// ok",
      "// rien",
      "// keep clear",
      "// false"
    ]
  },
  {
    "id": 15,
    "question": "Que va afficher ce code dans la console ?",
    "code": "console.log((v => v + 1)(5))",
    "choices": [
      "// (v => v + 1)(5)",
      "// unefined",
      "// 6",
      "// function()"
    ]
  },
  {
    "id": 16,
    "question": "Que va afficher ce code dans la console ?",
    "code": "const rows = [\n  {\n    user: 'Tom',\n    level: 5,\n  },\n  {\n    user: 'Jenny',\n    level: 4,\n  },\n  {\n    user: 'Bryan',\n    level: 2,\n  },\n  {\n    user: undefined,\n    level: 11,\n  },\n  {\n    user: 'Margaret',\n    level: 13,\n  },\n];\n\nconsole.log(rows.map(({ user }) => user).filter(value => value).length);\n\n",
    "choices": [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5"
    ]
  },
  {
    "id": 17,
    "question": "Que va afficher ce code dans la console ?",
    "code": "const profile = { userName: 'Chris' };\nconst profile2 = { ...profile };\nconst { username: userName } = profile2;\nconsole.log(userName);",
    "choices": [
      "// Chris",
      "// username",
      "// undefined"
    ]
  },
  {
    "id": 18,
    "question": "A quoi sert le premier paramètre de Promise.then ?",
    "choices": [
      "// C'est un callback exécuté dans tous les cas lorsque la promesse est résolue",
      "// C'est un callback exécuté lorsque la promesse est en échec",
      "// C'est la valeur par défaut"
    ]
  },
  {
    "id": 19,
    "question": "L'Ecma est une organisation ***** fondée en *****",
    "choices": [
      "// européenne - 1961",
      "// américaine - 1972",
      "// chinoise - 1983",
      "// russe - 2001"
    ]
  },
  {
    "id": 20,
    "question": "Qu'affiche ce code ?",
    "code": "String.prototype.ucSplit = function() { return this.replace(/(?<=.)([A-Z])/g, ' $1'); };\nconsole.log(\"TheQuickBrownFoxJumpsOverTheLazyDog.\".ucSplit());",
    "choices": [
      "// ƒ () { return this.replace(/(?<=.)([A-Z])/g, ' $1'); }",
      "// TheQuickBrownFoxJumpsOverTheLazyDog.",
      "// The Quick Brown Fox Jumps Over The Lazy Dog."
    ]
  }
]
